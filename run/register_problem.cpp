#include "register_problem.h"
#include "include_problem.h"

namespace OFEC {
	void register_problem() {
		/*combination*/
		REGISTER(problem, multi_dimensional_knapsack, "ComOP_MKP", std::set<problem_tag>({ problem_tag::MKP, problem_tag::ComOP }));
		REGISTER(problem, one_max, "ComOP_One_Max", std::set<problem_tag>({ problem_tag::ONEMAX, problem_tag::ComOP }));
		REGISTER(problem, quadratic_assignment, "ComOP_QAP", std::set<problem_tag>({ problem_tag::QAP, problem_tag::ComOP }));
		REGISTER(problem, travelling_salesman, "ComOP_TSP", std::set<problem_tag>({ problem_tag::TSP, problem_tag::ComOP }));
		/*multi_objective*/
		REGISTER(problem, ZDT1, "MOP_ZDT1", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, ZDT2, "MOP_ZDT2", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, ZDT3, "MOP_ZDT3", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, ZDT4, "MOP_ZDT4", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, ZDT6, "MOP_ZDT6", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, DTLZ1, "MOP_DTLZ1", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, DTLZ2, "MOP_DTLZ2", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, DTLZ3, "MOP_DTLZ3", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, DTLZ4, "MOP_DTLZ4", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, DTLZ7, "MOP_DTLZ6", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F1, "MOP_MOEA_F1", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F2, "MOP_MOEA_F2", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F3, "MOP_MOEA_F3", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F4, "MOP_MOEA_F4", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F5, "MOP_MOEA_F5", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F6, "MOP_MOEA_F6", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F7, "MOP_MOEA_F7", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F8, "MOP_MOEA_F8", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, MOEA_F9, "MOP_MOEA_F9", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT1, "MOP_GLT1", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT2, "MOP_GLT2", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT3, "MOP_GLT3", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT4, "MOP_GLT4", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT5, "MOP_GLT5", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, GLT6, "MOP_GLT6", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF01, "MOP_UF01", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF02, "MOP_UF02", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF03, "MOP_UF03", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF04, "MOP_UF04", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF05, "MOP_UF05", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF06, "MOP_UF06", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF07, "MOP_UF07", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF08, "MOP_UF08", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF09, "MOP_UF09", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, UF10, "MOP_UF10", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG1, "MOP_WFG1", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG2, "MOP_WFG2", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG3, "MOP_WFG3", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG4, "MOP_WFG4", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG5, "MOP_WFG5", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG6, "MOP_WFG6", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG7, "MOP_WFG7", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG8, "MOP_WFG8", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		REGISTER(problem, WFG9, "MOP_WFG9", std::set<problem_tag>({ problem_tag::MOP,problem_tag::ConOP }));
		/*BBOB*/
		REGISTER(problem, BBOB_F01, "GOP_BBOB_F01_Sphere", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F02, "GOP_BBOB_F02_Ellipsoidal", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F03, "GOP_BBOB_F03_Rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F04, "GOP_BBOB_F04_BucheRastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F05, "GOP_BBOB_F05_Slope", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F06, "GOP_BBOB_F06_Sector", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F07, "GOP_BBOB_F07_StepEllipsoid", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F08, "GOP_BBOB_F08_OriginalRosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F09, "GOP_BBOB_F09_RotatedRosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F10, "GOP_BBOB_F10_NonseparableEllipsoid", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F11, "GOP_BBOB_F11_Discus", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F12, "GOP_BBOB_F12_BentCigar", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F13, "GOP_BBOB_F13_SharpRidge", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F14, "GOP_BBOB_F14_DifferentPowers", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F15, "GOP_BBOB_F15_NonseparableRastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F16, "GOP_BBOB_F16_Weierstrass", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F17, "GOP_BBOB_F17_SchaffersF7", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F18, "GOP_BBOB_F18_IllconditionedSchaffersF7", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F19, "GOP_BBOB_F19_CompositeGriewankRosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F20, "GOP_BBOB_F20_Schwefel", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F21, "GOP_BBOB_F21_GallagherGaussian101mePeaks", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F22, "GOP_BBOB_F22_GallagherGaussian21hiPeaks", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F23, "GOP_BBOB_F23_Katsuura", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, BBOB_F24, "GOP_BBOB_F24_LunacekBiRastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		/*classical_GOP*/
		REGISTER(problem, ackley, "GOP_CLASSICAL_ackley", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, bent_cigar, "GOP_CLASSICAL_bent_cigar", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, different_powers, "GOP_CLASSICAL_different_powers", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, discus, "GOP_CLASSICAL_discus", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, elliptic, "GOP_CLASSICAL_elliptic", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, griewank, "GOP_CLASSICAL_griewank", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, griewank_rosenbrock, "GOP_CLASSICAL_griewank_rosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, happy_cat, "GOP_CLASSICAL_happy_cat", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, HGBat, "GOP_CLASSICAL_HGBat", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, katsuura, "GOP_CLASSICAL_katsuura", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, modified_schwefel, "GOP_CLASSICAL_modified_schwefel", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, non_continuous_rastrigin, "GOP_CLASSICAL_non_continuous_rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, non_continuous_scaffer_F6, "GOP_CLASSICAL_non_continuous_scaffer_F6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, penalized_1, "GOP_CLASSICAL_penalized_1", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, penalized_2, "GOP_CLASSICAL_penalized_2", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, quartic_noisy, "GOP_CLASSICAL_quartic_noisy", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rastrigin, "GOP_CLASSICAL_rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rosenbrock, "GOP_CLASSICAL_rosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rotated_bent_cigar, "GOP_CLASSICAL_rotated_bent_cigar", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rotated_discus, "GOP_CLASSICAL_rotated_discus", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rotated_rosenbrock, "GOP_CLASSICAL_rotated_rosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, rotated_scaffer_F6, "GOP_CLASSICAL_rotated_scaffer_F6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, scaffer_F6, "GOP_CLASSICAL_scaffer_F6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, schwefel, "GOP_CLASSICAL_schwefel", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, schwefel_1_2, "GOP_CLASSICAL_schwefel_1_2", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, schwefel_2_6, "GOP_CLASSICAL_schwefel_2_6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, sphere, "GOP_CLASSICAL_sphere", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, sphere_noisy, "GOP_CLASSICAL_sphere_noisy", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, step, "GOP_CLASSICAL_step", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, weierstrass, "GOP_CLASSICAL_weierstrass", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		/*CEC2005_GOP*/
		REGISTER(problem, CEC2005_GOP_F01, "GOP_CEC2005_F01_shifted_sphere", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F02, "GOP_CEC2005_F02_shifted_schwefel_1_2", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F03, "GOP_CEC2005_F03_shifted_rotated_high_cond_elliptic", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F04, "GOP_CEC2005_F04_shifted_schwefel_1_2_noisy", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F05, "GOP_CEC2005_F05_schwefel_2_6_bound", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F06, "GOP_CEC2005_F06_shifted_rosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F07, "GOP_CEC2005_F07_shifted_rotated_griewank_no_bound", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F08, "GOP_CEC2005_F08_shifted_rotated_ackley_bound", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F09, "GOP_CEC2005_F09_shifted_rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F10, "GOP_CEC2005_F10_shifted_rotated_rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F11, "GOP_CEC2005_F11_shifted_rotated_weierstrass", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F12, "GOP_CEC2005_F12_schwefel_2_13", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F13, "GOP_CEC2005_F13_shifted_expanded_griewank_rosenbrock", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F14, "GOP_CEC2005_F14_shifted_rotated_expanded_scaffer_F6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F15, "GOP_CEC2005_F15_hybrid_composition", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F16, "GOP_CEC2005_F16_rotated_hybrid_composition_F15", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F17, "GOP_CEC2005_F17_hybrid_composition_noisy", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F18, "GOP_CEC2005_F18_rotated_hybrid_composition", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F19, "GOP_CEC2005_F19_rotated_hybrid_narrow_basin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F20, "GOP_CEC2005_F20_rotated_hybrid_bound", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F21, "GOP_CEC2005_F21_rotated_hybrid_composition", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F22, "GOP_CEC2005_F22_rotated_hybrid_high_condition_number_matrix", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F23, "GOP_CEC2005_F23_non_continuous_rotated_hybrid", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F24, "GOP_CEC2005_F24_rotated_hybrid_composition", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2005_GOP_F25, "GOP_CEC2005_F25_rotated_hybrid_no_bound", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		/*CEC2013_large_scale*/
		REGISTER(problem, CEC2013_LSOP_F01, "LSOP_CEC2013_F01_ShiftedElliptic", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F02, "LSOP_CEC2013_F02_ShiftedRastrigin", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F03, "LSOP_CEC2013_F03_ShiftedAckley", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F04, "LSOP_CEC2013_F04_N7S1_SR_Elliptic", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F05, "LSOP_CEC2013_F05_N7S1_SR_Rastrigin", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F06, "LSOP_CEC2013_F06_N7S1_SR_Ackley", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F07, "LSOP_CEC2013_F07_N7S1_ShiftedSchwefel", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F08, "LSOP_CEC2013_F08_N20_SR_Elliptic", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F09, "LSOP_CEC2013_F09_N20_SR_Rastrigin", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F10, "LSOP_CEC2013_F10_N20_SR_Ackley", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F11, "LSOP_CEC2013_F11_N20_ShiftedSchwefel", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F12, "LSOP_CEC2013_F12_ShiftedRosenbrock", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F13, "LSOP_CEC2013_F13_ConformingOS_ShiftedSchwefel", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F14, "LSOP_CEC2013_F14_ConflictingOS_ShiftedSchwefel", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_LSOP_F15, "LSOP_CEC2013_F15_ShiftedSchwefel", std::set<problem_tag>({ problem_tag::LSOP,problem_tag::ConOP }));
		/*CEC2015_GOP*/
		REGISTER(problem, CEC2015_GOP_F01, "GOP_CEC2015_F01_R_elliptic", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F02, "GOP_CEC2015_F02_R_cigar", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F03, "GOP_CEC2015_F03_SR_ackley", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F04, "GOP_CEC2015_F04_SR_rastrigin", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F05, "GOP_CEC2015_F05_SR_schwefel", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F06, "GOP_CEC2015_F06_hybrid1", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F07, "GOP_CEC2015_F07_hybrid2", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F08, "GOP_CEC2015_F08_hybrid3", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F09, "GOP_CEC2015_F09_global_composition1", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F10, "GOP_CEC2015_F10_global_composition2", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F11, "GOP_CEC2015_F11_global_composition3", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F12, "GOP_CEC2015_F12_global_composition4", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F13, "GOP_CEC2015_F13_global_composition5", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F14, "GOP_CEC2015_F14_global_composition6", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_GOP_F15, "GOP_CEC2015_F15_global_composition7", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
		/*CEC2015_EOP*/
		REGISTER(problem, CEC2015_EOP_F01, "EOP_CEC2015_F01_rotated_bent_cigar", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F02, "EOP_CEC2015_F02_rotated_discus", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F03, "EOP_CEC2015_F03_shifted_rotated_weierstrass", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F04, "EOP_CEC2015_F04_shifted_rotated_schwefel", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F05, "EOP_CEC2015_F05_shifted_rotated_katsuura", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F06, "EOP_CEC2015_F06_shifted_rotated_happy_cat", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F07, "EOP_CEC2015_F07_shifted_rotated_HGBat", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F08, "EOP_CEC2015_F08_shifted_rotated_griewank_rosenbrock", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F09, "EOP_CEC2015_F09_shifted_rotated_scaffer_F6", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F10, "EOP_CEC2015_F10_hybrid1", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F11, "EOP_CEC2015_F11_hybrid2", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F12, "EOP_CEC2015_F12_hybrid3", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F13, "EOP_CEC2015_F13_expensive_composition1", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F14, "EOP_CEC2015_F14_expensive_composition2", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_EOP_F15, "EOP_CEC2015_F15_expensive_composition3", std::set<problem_tag>({ problem_tag::EOP,problem_tag::ConOP }));
		/*CEC2017_COP*/
		REGISTER(problem, CEC2017_COP_F01, "COP_CEC2017_F01", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F02, "COP_CEC2017_F02", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F03, "COP_CEC2017_F03", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F04, "COP_CEC2017_F04", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F05, "COP_CEC2017_F05", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F06, "COP_CEC2017_F06", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F07, "COP_CEC2017_F07", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F08, "COP_CEC2017_F08", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F09, "COP_CEC2017_F09", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F10, "COP_CEC2017_F10", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F11, "COP_CEC2017_F11", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F12, "COP_CEC2017_F12", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F13, "COP_CEC2017_F13", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F14, "COP_CEC2017_F14", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F15, "COP_CEC2017_F15", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F16, "COP_CEC2017_F16", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F17, "COP_CEC2017_F17", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F18, "COP_CEC2017_F18", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F19, "COP_CEC2017_F19", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F20, "COP_CEC2017_F20", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F21, "COP_CEC2017_F21", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F22, "COP_CEC2017_F22", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F23, "COP_CEC2017_F23", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F24, "COP_CEC2017_F24", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F25, "COP_CEC2017_F25", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F26, "COP_CEC2017_F26", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F27, "COP_CEC2017_F27", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		REGISTER(problem, CEC2017_COP_F28, "COP_CEC2017_F28", std::set<problem_tag>({ problem_tag::COP,problem_tag::ConOP }));
		/*classical_MMOP*/
		REGISTER(problem, beasley, "MMOP_CLASSICAL_beasley", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, branin_rcos, "MMOP_CLASSICAL_branin_rcos", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, center_peak, "MMOP_CLASSICAL_center_peak", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, equal_maxima, "MMOP_CLASSICAL_equal_maxima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_decreasing_minima, "MMOP_CLASSICAL_expanded_decreasing_minima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_equal_maxima, "MMOP_CLASSICAL_expanded_equal_maxima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_five_uneven_peak_trap, "MMOP_CLASSICAL_expanded_five_uneven_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_himmelblau, "MMOP_CLASSICAL_expanded_himmelblau", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_six_hump_camel_back, "MMOP_CLASSICAL_expanded_six_hump_camel_back", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_two_peak_trap, "MMOP_CLASSICAL_expanded_two_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, expanded_uneven_minima, "MMOP_CLASSICAL_expanded_uneven_minima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, FIBA, "MMOP_CLASSICAL_FIBA", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, five_hills, "MMOP_CLASSICAL_five_hills", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, five_uneven_peak_trap, "MMOP_CLASSICAL_five_uneven_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, himmenblau, "MMOP_CLASSICAL_himmenblau", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, keane_bump, "MMOP_CLASSICAL_keane_bump", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, max_global, "MMOP_CLASSICAL_max_global", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, michalewicz, "MMOP_CLASSICAL_michalewicz", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, modified_rastrigin, "MMOP_CLASSICAL_modified_rastrigin", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, modified_shekel, "MMOP_CLASSICAL_modified_shekel", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, modified_vincent, "MMOP_CLASSICAL_modified_vincent", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, shaffer, "MMOP_CLASSICAL_shaffer", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, shubert, "MMOP_CLASSICAL_shubert", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, six_hump_camel_back, "MMOP_CLASSICAL_six_hump_camel_back", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, szu, "MMOP_CLASSICAL_szu", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, uneven_de_maxima, "MMOP_CLASSICAL_uneven_de_maxima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, valleys, "MMOP_CLASSICAL_valleys", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, vincent, "MMOP_CLASSICAL_vincent", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, waves, "MMOP_CLASSICAL_waves", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		/*CEC2013_MMOP*/
		REGISTER(problem, CEC2013_MMOP_F01, "MMOP_CEC2013_F01_five_uneven_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F02, "MMOP_CEC2013_F02_equal_maxima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F03, "MMOP_CEC2013_F03_uneven_de_maxima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F04, "MMOP_CEC2013_F04_himmenblau", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F05, "MMOP_CEC2013_F05_six_hump_camel_back", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F06, "MMOP_CEC2013_F06_shubert", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F07, "MMOP_CEC2013_F07_vincent", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F08, "MMOP_CEC2013_F08_modified_rastrigin", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F09, "MMOP_CEC2013_F09_composition1", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F10, "MMOP_CEC2013_F10_composition2", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F11, "MMOP_CEC2013_F11_composition3", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2013_MMOP_F12, "MMOP_CEC2013_F12_composition4", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		/*CEC2015_MMP*/
		REGISTER(problem, CEC2015_MMOP_F01, "MMOP_CEC2015_F01_SR_expanded_two_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F02, "MMOP_CEC2015_F02_SR_expanded_five_uneven_peak_trap", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F03, "MMOP_CEC2015_F03_SR_expanded_equal_minima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F04, "MMOP_CEC2015_F04_SR_expanded_decreasing_minima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F05, "MMOP_CEC2015_F05_SR_expanded_uneven_minima", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F06, "MMOP_CEC2015_F06_SR_expanded_himmelblau", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F07, "MMOP_CEC2015_F07_SR_expanded_six_hump_camel_back", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F08, "MMOP_CEC2015_F08_SR_modified_vincent", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F09, "MMOP_CEC2015_F09_composition2015_C1", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F10, "MMOP_CEC2015_F10_composition2015_C2", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F11, "MMOP_CEC2015_F11_composition2015_C3", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F12, "MMOP_CEC2015_F12_composition2015_C4", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F13, "MMOP_CEC2015_F13_composition2015_C5", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F14, "MMOP_CEC2015_F14_composition2015_C6", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		REGISTER(problem, CEC2015_MMOP_F15, "MMOP_CEC2015_F15_composition2015_C7", std::set<problem_tag>({ problem_tag::MMOP,problem_tag::ConOP }));
		/*realworld*/
		REGISTER(problem, gear_train, "REALWORLD_gear_Train", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));
        REGISTER(problem, par_est_FM_sound_waves, "REALWORLD_par_est_FM_sound_waves", std::set<problem_tag>({ problem_tag::GOP,problem_tag::ConOP }));

		/*dynamic optimization problems*/
		REGISTER(problem, moving_peak, "DOP_moving_peaks", std::set<problem_tag>({ problem_tag::DOP,problem_tag::ConOP,problem_tag::MMOP }));
		REGISTER(problem, rotation_DBG, "DOP_rotationDBG", std::set<problem_tag>({ problem_tag::DOP,problem_tag::ConOP,problem_tag::MMOP }));
		REGISTER(problem, composition_DBG, "DOP_compositionDBG", std::set<problem_tag>({ problem_tag::DOP,problem_tag::ConOP,problem_tag::MMOP }));

	}
}
